@page "/filecrawler"
@using System.IO
@using Elasticsearch.Net
@using Models
@using Radzen
@inject Microsoft.Extensions.Options.IOptions<CrawlerOptions> Options
@inject NotificationService NotifService;
<RadzenNotification />
<PageTitle>Indexer</PageTitle>
<h3>File Crawler</h3>

<div class="mb-3">
    <label>Folder Paths (seperate by semicolon):</label>
    <input type="text" class="form-control" @bind="folderPath" />
    @if (!string.IsNullOrEmpty(folderPath) && !CheckFolders())
    {
        <div class="text-danger">⚠️ The path does not exist.</div>
    }
</div>


<RadzenButton Text="Start Crawling" Click="async () => await StartCrawling()" Icon="find_in_page" Style="margin-right:10px;"
              Disabled="@(string.IsNullOrEmpty(folderPath) || es is  null)" />
<RadzenButton Text="Clear ES" Click=@deleteIndexs Icon="delete_forever" Style="margin-right:10px;" IconColor="@Colors.Danger"
              Disabled="@( es is  null)" />
<RadzenStack Gap="1rem" class="rz-m-12">
    <RadzenProgressBar Value=@totalFilesCounter Max=@totalFiles Unit=@pgunit />
   
</RadzenStack>
@if (extensionStats.Count > 0)
{
    <h4 class="m4-4">Results(@totalFilesCounter)</h4>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Extension</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kvp in extensionStats)
            {
                <tr>
                    <td>@kvp.Key</td>
                    <td>@kvp.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string folderPath = "";
    private Dictionary<string, int> extensionStats = new();
    //private Task _ensureIndexExistsTask;
    private ElasticsearchService es=null;
    int totalFilesCounter = 0;
    int totalFiles = 0;
    string pgunit;

    protected override async Task OnInitializedAsync()
    {
        // Load default from appsettings.json if present
        var defaultPath = Options.Value.DefaultFolder;
        if (!string.IsNullOrWhiteSpace(defaultPath))
        {
            folderPath = defaultPath;

        }
        var  _ensureIndexExistsTask =await  GetElasticsearchService(); // Ensure the service is initialized
        // _ensureIndexExistsTask.Wait();
        // var ee=ElasticsearchService.CreateAsync("http://localhost:9200", "dwg", "pdf");
        //ee.Wait();
    }
    public async Task<bool> GetElasticsearchService()
    {
        if (es == null)
        {
            es = await ElasticsearchService.CreateAsync(uri: "http://localhost:9200", new List<string>{"pdf","dwg","other"});
        }
        if (es is null)
        {
            NotifService.Notify(NotificationSeverity.Error, "Elastic Server", "Elastic server not started on this server!", duration: 8000, closeOnClick: true);
            return false;}
        return true;
    }
    public void deleteIndexs()
    {
        es.deleteIndex("dwg");
        es.deleteIndex("pdf");
        es.deleteIndex("other");
        es = null;
        extensionStats = new();
    }

    public bool CheckFolders()
    {
        var folders = folderPath.Split(";");

        foreach (var f in folders)
            if (!Directory.Exists(f))
                return false;

        return true;
    }

    private async Task StartCrawling()
    {
        extensionStats.Clear();
        totalFilesCounter = 0;
        if (string.IsNullOrWhiteSpace(folderPath) || !Directory.Exists(folderPath))
            return;

        var allFiles = Directory.GetFiles(folderPath, "*.*", SearchOption.AllDirectories);
        totalFiles = allFiles.Count();
        pgunit = $" out of {totalFiles} ";

        foreach (var file in allFiles)
        {
            var ext = Path.GetExtension(file).ToLowerInvariant();
            if (string.IsNullOrWhiteSpace(ext)) ext = "[no extension]";


            if (!extensionStats.ContainsKey(ext))
                extensionStats[ext] = 0;

            extensionStats[ext]++;
            totalFilesCounter++;
            if (ext == ".pdf" )
            {
                var exists = await es.FileExists(file, ext);
                if (exists)
                    continue;
                var pdfParser = new PdfParser(file);

                var response = await es.client.LowLevel.IndexAsync<StringResponse>(
                    "pdf",    // index name
                    PostData.String(pdfParser.PdfData.ToString()));


            }
            else if (ext == ".dwg")
            {
                var dwg = fileToDwgdata(file,Options.Value);
                try
                {
                    await es.IndexArticleAsync(dwg);

                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error indexing {file}: {ex.Message}");
                }
            }
            else if(Extensions.IsPlainTextFile(file))
            {

            }
            if (totalFilesCounter % 10 == 0)
                StateHasChanged();
        }
        NotifService.Notify(NotificationSeverity.Success, "Finished Indexing", "All files in folder indexed!", duration: 8000, closeOnClick: true);
    }
    static DwgData fileToDwgdata(string path,CrawlerOptions options)
    {
        // 1. Run the external executable and capture the JSON output



        //var p = DwgParser.JsonFromDwg(path,options);
        var pp = new DwgParser(path,options);
        //var jsonOutput = p.esStorage.ToLowercaseKeys();
        var dwg = DwgData.FromParser(pp);
        return dwg;

    }
}
