@page "/filecrawler"
@using System.IO
@using Elasticsearch.Net
@using Models
@using Radzen
@using System.Text
@inject IJSRuntime JS

@inject Microsoft.Extensions.Options.IOptions<CrawlerOptions> Options

@inject NotificationService NotifService;
@inject NavigationManager Nav
<RadzenNotification />

<HeadContent>
    <PageTitle>Crawler</PageTitle>
    <link rel="icon" type="image/png" href="images/crawler-48.png" />
</HeadContent>

@* <button @onclick="PickDirectory">Pick Folder</button> *@

<h3>File Crawler</h3>
<div class="mb-3">
    <label>Folder Paths (seperate by semicolon):</label>
    <input type="text" class="form-control" @bind="PathsToIndexAsString" />
    @if (!string.IsNullOrEmpty(PathsToIndexAsString) && !CheckFolders())
    {
        <div class="text-danger">⚠️ The path does not exist.</div>
    }
</div>

<div class="rz-p-2 rz-text-align-left">
    <RadzenCheckBox @bind-Value=@includeOcr Name="includeocr" />
    <RadzenLabel Text="include Ocr" Component="includeocr" class="rz-ms-2" />
</div>
<RadzenButton Text="Start Crawling" Click="async () => await StartCrawling()" Icon="find_in_page" Style="margin-right:10px;"
              Disabled="@(string.IsNullOrEmpty(PathsToIndexAsString) || es is  null)" />
<RadzenButton Text="Clear ES" Click=@deleteIndexs Icon="delete_forever" Style="margin-right:10px;" IconColor="@Colors.Danger"
              Disabled="@( es is  null)" />
@if(PathsInEs.Count>0)
{<h5 class="mt-3">Paths allready in Elastic:</h5>
<div class=" rz-text-align-left">
    <RadzenListBox @bind-Value=@selectedPath Data=@PathsInEs Style="width: 100%; max-width: 400px; "  />
    <RadzenButton Text="Add selected" Click="addToSearchPath" Icon="note_add" Style="margin-right:10px;"
                  Disabled="@(PathsInEs.Count==0 || es is  null)" />
    <RadzenButton Text="Add All" Click="addAllToSearchPath" Icon="note_add" Style="margin-right:10px;"
                  Disabled="@(PathsInEs.Count==0 || es is  null)" />
    <RadzenButton Text="Replace All" Click="replaceSearchPath" Icon="note_add" Style="margin-right:10px;"
                  Disabled="@(PathsInEs.Count==0 || es is  null)" />
</div>}
<RadzenStack Gap="1rem" class="rz-m-12">
    @foreach (var p in PathsToIndex)
        if ( totalFilesCounter.ContainsKey(p))
    { 
        <RadzenProgressBar Value=@totalFilesCounter[p] Max=@totalFiles[p] Unit=@pgunit[p] />
    }
    
   
</RadzenStack>
@if (extensionStats.Count > 0)
{
    <div class=" rz-text-align-left">


        <h4 class="m4-4"><RadzenIcon Icon="assessment" Class="rz-text-primary" Style="margin-right: 6px;" />File Extensions Statistics(@totalFilesCounter.Values.Sum())</h4>
    </div>
    <table class="table table-bordered">
       @*  <thead>
            <tr>
                <th>Extension</th>
                <th>Count</th>
            </tr>
        </thead> *@
        <tbody>
            @foreach (var kvp in extensionStats)
            {
                <tr>
                    <td>@kvp.Key</td>
                    <td>@kvp.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool includeOcr = false;
    private string PathsToIndexAsString = "";
    private Dictionary<string, int> extensionStats = new();
    private List<string> PathsToIndex=new();
    //private Task _ensureIndexExistsTask;
    private ElasticsearchService es=null;
    Dictionary<string,int> totalFilesCounter = new();
    Dictionary<string,int> totalFiles = new();
    Dictionary<string,string> pgunit=new();
    private List<string> PathsInEs=new();
    private string selectedPath;

    protected override async Task OnInitializedAsync()
    {
        // Load default from appsettings.json if present
        var defaultPath = Options.Value.DefaultFolder;
        if (!string.IsNullOrWhiteSpace(defaultPath))
        {
            PathsToIndexAsString = defaultPath;

        }
        var  _ensureIndexExistsTask =await  GetElasticsearchService(); // Ensure the service is initialized
        // _ensureIndexExistsTask.Wait();
        // var ee=ElasticsearchService.CreateAsync("http://localhost:9200", "dwg", "pdf");
        //ee.Wait();
        PathsInEs = await es.GetAllPaths();
        selectedPath = PathsInEs.FirstOrDefault() ?? string.Empty;
    }
    public async Task<bool> GetElasticsearchService()
    {
        if (es == null)
        {
            es = await ElasticsearchService.CreateAsync(uri: "http://localhost:9200", new List<string>{"pdf","dwg","other"});
        }
        if (es is null)
        {
            NotifService.Notify(NotificationSeverity.Error, "Elastic Server", "Elastic server not started on this server!", duration: 8000, closeOnClick: true);
            return false;}
        return true;
    }
    public void deleteIndexs()
    {
        es.deleteIndex("dwg");
        es.deleteIndex("pdf");
        es.deleteIndex("other");
        es = null;
        extensionStats = new();
        Nav.NavigateTo(Nav.Uri, forceLoad: true);
    }

    private void addToSearchPath()
    {
        if (!string.IsNullOrWhiteSpace(selectedPath))
            PathsToIndexAsString += ";";
        PathsToIndexAsString += selectedPath;
    }
    private async Task PickDirectory()
    {
        // Call our JS function
        var files = await JS.InvokeAsync<List<string>>("pickDirectory");
    }
    private void addAllToSearchPath()
    {
        foreach (var p in PathsInEs)
        { if (!string.IsNullOrWhiteSpace(p))
                PathsToIndexAsString += ";";
            PathsToIndexAsString += p;}
    }
    private void replaceSearchPath()
    {
        PathsToIndexAsString = "";
        foreach (var p in PathsInEs)
        {
            if (!string.IsNullOrWhiteSpace(p))
                PathsToIndexAsString += ";";
            PathsToIndexAsString += p;
        }
    }
    public bool CheckFolders()
    {
        PathsToIndex = PathsToIndexAsString.Split(";", StringSplitOptions.RemoveEmptyEntries).ToList();

        foreach (var f in PathsToIndex)
            if (!Directory.Exists(f))
                return false;

        return true;
    }

    private async Task StartCrawling()
    {
        extensionStats.Clear();
        //totalFilesCounter = 0;
        //PathsToIndex = PathsToIndexAsString.Split(";");
        var tasks = new List<Task>();
        foreach (var p in PathsToIndex)
            tasks.Add(indexFolder(p));
        await Task.WhenAll(tasks);

        NotifService.Notify(NotificationSeverity.Success, "Finished Indexing", "All files in folder indexed!", duration: 8000, closeOnClick: true);
    }
    private async Task indexFolder(string folder)
    {
        if (!Directory.Exists(folder))
            return;
        Console.WriteLine($"Start indexing {folder}");
        totalFilesCounter[folder] = 0;
        var allFiles = Directory.GetFiles(folder, "*.*", SearchOption.AllDirectories);
        totalFiles[folder] = allFiles.Count();
        pgunit[folder] = $" out of {totalFiles[folder]} ";
        int lastprecent = 0;
        foreach (var file in allFiles)
        {
            var ext = Path.GetExtension(file).ToLowerInvariant();
            if (string.IsNullOrWhiteSpace(ext)) ext = "[no extension]";


            if (!extensionStats.ContainsKey(ext))
                extensionStats[ext] = 0;

            extensionStats[ext]++;
            totalFilesCounter[folder]++;
            if (ext == ".pdf")
            {
                var exists = await es.FileExists(file, ext);
                if (exists)
                    continue;
                var pdfParser = new PdfParser(file,includeOcr);
                if (pdfParser.PdfData == null)
                    continue;
                pdfParser.PdfData["searchpath"] = folder;
               

               

                var response = await es.client.LowLevel.IndexAsync<StringResponse>(
                    "pdf",    // index name
                    PostData.String(pdfParser.PdfData.ToString()));


            }
            else if (ext == ".dwg")
            {
                var exists = await es.FileExists(file, ext);
                if (exists)
                    continue;
                var dwg = fileToDwgdata(file, Options.Value);
                dwg.searchpath = folder;
                try
                {
                    await es.IndexDwgAsync(dwg);

                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error indexing {file}: {ex.Message}");
                }
            }
            else if (Extensions.IsPlainTextFile(file))
            {
                var exists = await es.FileExists(file, ext);
                if (exists)
                    continue;
                string text = File.ReadAllText(file, Encoding.Default);
                System.IO.FileInfo fi = new System.IO.FileInfo(file);
                var md = new TxtMetadata
                {
                    Extension = fi.Extension,
                    Size = fi.Length,
                    Created = fi.CreationTime,
                    LastModified = fi.LastWriteTime,
                    FullPath = fi.FullName
                };
                var txt = new TextFileData
                {
                    metadata = md,
                    file = file,
                    content = text,
                    searchpath = folder

                };
                try
                {
                    await es.IndexDwgAsync(txt);

                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error indexing {file}: {ex.Message}");
                }

            }
            int percent = (totalFilesCounter[folder] * 100) / totalFiles[folder];
            if (percent > lastprecent && totalFilesCounter[folder] % 5 == 0)
            {
                StateHasChanged();
                lastprecent = percent;
            }
        }
        }
    
    static DwgData fileToDwgdata(string path,CrawlerOptions options)
    {
        // 1. Run the external executable and capture the JSON output



        //var p = DwgParser.JsonFromDwg(path,options);
        var pp = new DwgParser(path,options);
        //var jsonOutput = p.esStorage.ToLowercaseKeys();
        var dwg = DwgData.FromParser(pp);
        return dwg;

    }
}
