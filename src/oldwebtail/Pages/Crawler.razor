@page "/filecrawler"
@using System.IO
@using Elasticsearch.Net
@using Models
@inject Microsoft.Extensions.Options.IOptions<CrawlerOptions> Options


<h3>File Crawler</h3>

<div class="mb-3">
    <label>Folder Path:</label>
    <input type="text" class="form-control" @bind="folderPath" />
    @if (!string.IsNullOrEmpty(folderPath) && !Directory.Exists(folderPath))
    {
        <div class="text-danger">⚠️ The path does not exist.</div>
    }
</div>

<button class="btn btn-primary" @onclick="StartCrawling"
        disabled="@string.IsNullOrEmpty(folderPath)">
    Start Crawling
</button>

@if (extensionStats.Count > 0)
{
    <h4 class="mb-2">Results</h4>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Extension</th>
                <th>Count</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var kvp in extensionStats)
            {
                <tr>
                    <td>@kvp.Key</td>
                    <td>@kvp.Value</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string folderPath = "";
    private Dictionary<string, int> extensionStats = new();
    private Task _ensureIndexExistsTask;
    private ElasticsearchService es;

    protected override void OnInitialized()
    {
        // Load default from appsettings.json if present
        var defaultPath = Options.Value.DefaultFolder;
        if (!string.IsNullOrWhiteSpace(defaultPath))
        {
            folderPath = defaultPath;
        }
        _ensureIndexExistsTask = GetElasticsearchService(); // Ensure the service is initialized
        _ensureIndexExistsTask.Wait();
        var ee=ElasticsearchService.CreateAsync("http://es:9200", "dwg", "pdf");
        //ee.Wait();
    }
    public async Task<ElasticsearchService> GetElasticsearchService()
    {
        if (es == null)
        {
            es = await ElasticsearchService.CreateAsync(uri: "http://localhost:9200", dwg_indexname: "dwg", pdf_indexname: "pdf");
        }
        return es;
    }

    private async Task StartCrawling()
    {
        extensionStats.Clear();

        if (string.IsNullOrWhiteSpace(folderPath) || !Directory.Exists(folderPath))
            return;

        var allFiles = Directory.GetFiles(folderPath, "*.*", SearchOption.AllDirectories);

        foreach (var file in allFiles)
        {
            var ext = Path.GetExtension(file).ToLowerInvariant();
            if (string.IsNullOrWhiteSpace(ext)) ext = "[no extension]";

            if (!extensionStats.ContainsKey(ext))
                extensionStats[ext] = 0;

            extensionStats[ext]++;
            if (ext == ".pdf" )
            {
                var pdfParser = new PdfParser(file);


                var response = await es.client.LowLevel.IndexAsync<StringResponse>(
                    "pdf",    // index name
                    PostData.String(pdfParser.PdfData.ToString()));

                continue;
            }
            else if (ext == ".dwg")
            {
                var dwg = fileToDwgdata(file);
                try
                {
                    await es.IndexArticleAsync(dwg);

                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error indexing {file}: {ex.Message}");
                }
            }
        }
    }
    static DwgData fileToDwgdata(string path)
    {
        // 1. Run the external executable and capture the JSON output



        var p = DwgParser.JsonFromDwg(path);
        var jsonOutput = p.esStorage.ToLowercaseKeys();
        var dwg = DwgData.FromJObject(jsonOutput);
        return dwg;

    }
}
